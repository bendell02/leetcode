
https://leetcode.com/problems/perfect-rectangle/

## code_good

https://leetcode-cn.com/problems/perfect-rectangle/solution/bi-jiao-rong-yi-li-jie-de-fang-fa-by-xiu-xi-e/  

```
Runtime: 312 ms, faster than 58.08% of C++ online submissions for Perfect Rectangle.
Memory Usage: 34.5 MB, less than 30.77% of C++ online submissions for Perfect Rectangle.
```


```cpp
class Solution {
public:
    bool isRectangleCover(vector<vector<int>>& rectangles) {
		long long area_sum = 0;
		vector<int> rect_max(4, INT_MAX);
		rect_max[2] = rect_max[3] = INT_MIN;
		set<pair<int, int> > points;

		int xs[4] = { 0, 0, 2, 2 };
		int ys[4] = { 1, 3, 1, 3 };

		for (auto r : rectangles) {
			area_sum += get_area(r);
			rect_max[0] = std::min(rect_max[0], r[0]);
			rect_max[1] = std::min(rect_max[1], r[1]);
			rect_max[2] = std::max(rect_max[2], r[2]);
			rect_max[3] = std::max(rect_max[3], r[3]);

			for (int i = 0; i < 4; ++i) {
				pair<int, int> p = make_pair(r[xs[i]], r[ys[i]]);
				if (!points.count(p)) {
					points.insert(p);
				}
				else {
					points.erase(p);
				}
			}
		}

		if (area_sum != get_area(rect_max)) {
			return false;
		}

		if (points.size() == 4 &&
			points.count(make_pair(rect_max[0], rect_max[1])) &&
			points.count(make_pair(rect_max[0], rect_max[3])) &&
			points.count(make_pair(rect_max[2], rect_max[1])) &&
			points.count(make_pair(rect_max[2], rect_max[3]))) {
			return true;
		}
		else {
			return false;
		}
	}

private:
	long long get_area(const vector<int> &rectangle) {
		return (rectangle[2] - rectangle[0])*(rectangle[3] - rectangle[1]);
	}
};
```


